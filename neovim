#!/bin/bash

version="0.10.4"
install_dir="/opt/"

if [[ -n "${NVIM_INSTALL_DIR}" ]]; then
  install_dir="${NVIM_INSTALL_DIR}"
  mkdir -p "${isntall_dir}"
fi

if [[ -n "${NVIM_INSTALL_VERSION}" ]]; then
  version="${NVIM_INSTALL_VERSION}"
fi

function ubuntu() {
  # installs
  apt update
  apt -y install make curl cmake gettext fd-find wget ninja-build cmake build-essential libreadline-dev unzip npm python3-pip python3-venv
}

function rhel() {
  dnf -y update
  dnf -y install yum-utils
  dnf config-manager --set-enabled crb
  dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
  dnf -y install cmake make git wget ninja-build gcc gettext glibc-gconv-extra unzip npm readline-devel ncurses-devel libevent-devel readline-devel

  # fd
  dnf -y copr enable tkbcopr/fd
  dnf -y install fd
  dnf clean all
}

OS_ID_LIKE=$(. /etc/os-release && echo "$ID_LIKE")
OS_ID=$(. /etc/os-release && echo "$ID")
if [[ "$OS_ID_LIKE" =~ rhel ]]; then
  rhel
elif [[ "$OS_ID" =~ ubuntu ]]; then
  ubuntu
else
  echo "Got ID_LIB $OS_ID_LIKE and ID $OS_ID, but that isn't implemented"
  exit 1
fi

# Neovim
pushd "$install_dir"
wget -qO- "https://github.com/neovim/neovim/archive/refs/tags/v$version.tar.gz" | tar zx
pushd "neovim-$version"
make CMAKE_BUILD_TYPE=RelWithDebInfo
make install
popd

# Lua
wget -qO- https://www.lua.org/ftp/lua-5.1.tar.gz | tar zx
pushd lua-5.1
make linux && make install
popd

# Luarocks
wget -qO- https://luarocks.org/releases/luarocks-3.11.1.tar.gz | tar zx
pushd "luarocks-3.11.1"
./configure && make && make install
popd

mkdir "$HOME/config"
git clone https://github.com/SBennett13/nvim.git "$HOME/.config/nvim"

nvim --headless "+Lazy! sync" +qa
nvim --headless +TSUpdate +qa

exit 0
